The system is: Darwin - 19.0.0 - x86_64
Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/local/Cellar/gcc/9.3.0_1/bin/cpp-9 
Build flags: 
Id flags:  

The output was:
0
# 1 "CMakeCCompilerId.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "CMakeCCompilerId.c"
# 321 "CMakeCCompilerId.c"
char const* info_compiler = "INFO" ":" "compiler[" "GNU" "]";
# 567 "CMakeCCompilerId.c"
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  ('0' + (((9) / 10000000)%10)), ('0' + (((9) / 1000000)%10)), ('0' + (((9) / 100000)%10)), ('0' + (((9) / 10000)%10)), ('0' + (((9) / 1000)%10)), ('0' + (((9) / 100)%10)), ('0' + (((9) / 10)%10)), ('0' + ((9) % 10)),

  '.', ('0' + (((3) / 10000000)%10)), ('0' + (((3) / 1000000)%10)), ('0' + (((3) / 100000)%10)), ('0' + (((3) / 10000)%10)), ('0' + (((3) / 1000)%10)), ('0' + (((3) / 100)%10)), ('0' + (((3) / 10)%10)), ('0' + ((3) % 10)),

   '.', ('0' + (((0) / 10000000)%10)), ('0' + (((0) / 1000000)%10)), ('0' + (((0) / 100000)%10)), ('0' + (((0) / 10000)%10)), ('0' + (((0) / 1000)%10)), ('0' + (((0) / 100)%10)), ('0' + (((0) / 10)%10)), ('0' + ((0) % 10)),





  ']','\0'};
# 614 "CMakeCCompilerId.c"
char const* info_platform = "INFO" ":" "platform[" "Darwin" "]";
char const* info_arch = "INFO" ":" "arch[" "]";
# 634 "CMakeCCompilerId.c"
const char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" "11" "]";
# 645 "CMakeCCompilerId.c"
int main(int argc, char* argv[])

{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];

  require += info_version[argc];
# 667 "CMakeCCompilerId.c"
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}


Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/local/Cellar/gcc/9.3.0_1/bin/cpp-9 
Build flags: 
Id flags: -D__CLASSIC_C__ 

The output was:
0
# 1 "CMakeCCompilerId.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "CMakeCCompilerId.c"
# 321 "CMakeCCompilerId.c"
char * info_compiler = "INFO" ":" "compiler[" "GNU" "]";
# 567 "CMakeCCompilerId.c"
char info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  ('0' + (((9) / 10000000)%10)), ('0' + (((9) / 1000000)%10)), ('0' + (((9) / 100000)%10)), ('0' + (((9) / 10000)%10)), ('0' + (((9) / 1000)%10)), ('0' + (((9) / 100)%10)), ('0' + (((9) / 10)%10)), ('0' + ((9) % 10)),

  '.', ('0' + (((3) / 10000000)%10)), ('0' + (((3) / 1000000)%10)), ('0' + (((3) / 100000)%10)), ('0' + (((3) / 10000)%10)), ('0' + (((3) / 1000)%10)), ('0' + (((3) / 100)%10)), ('0' + (((3) / 10)%10)), ('0' + ((3) % 10)),

   '.', ('0' + (((0) / 10000000)%10)), ('0' + (((0) / 1000000)%10)), ('0' + (((0) / 100000)%10)), ('0' + (((0) / 10000)%10)), ('0' + (((0) / 1000)%10)), ('0' + (((0) / 100)%10)), ('0' + (((0) / 10)%10)), ('0' + ((0) % 10)),





  ']','\0'};
# 614 "CMakeCCompilerId.c"
char * info_platform = "INFO" ":" "platform[" "Darwin" "]";
char * info_arch = "INFO" ":" "arch[" "]";
# 634 "CMakeCCompilerId.c"
 char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" "11" "]";







int main(argc, argv) int argc; char *argv[];



{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];

  require += info_version[argc];
# 667 "CMakeCCompilerId.c"
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}


Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/local/Cellar/gcc/9.3.0_1/bin/cpp-9 
Build flags: 
Id flags:  

The output was:
0
# 1 "CMakeCCompilerId.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "CMakeCCompilerId.c"
# 321 "CMakeCCompilerId.c"
char const* info_compiler = "INFO" ":" "compiler[" "GNU" "]";
# 567 "CMakeCCompilerId.c"
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  ('0' + (((9) / 10000000)%10)), ('0' + (((9) / 1000000)%10)), ('0' + (((9) / 100000)%10)), ('0' + (((9) / 10000)%10)), ('0' + (((9) / 1000)%10)), ('0' + (((9) / 100)%10)), ('0' + (((9) / 10)%10)), ('0' + ((9) % 10)),

  '.', ('0' + (((3) / 10000000)%10)), ('0' + (((3) / 1000000)%10)), ('0' + (((3) / 100000)%10)), ('0' + (((3) / 10000)%10)), ('0' + (((3) / 1000)%10)), ('0' + (((3) / 100)%10)), ('0' + (((3) / 10)%10)), ('0' + ((3) % 10)),

   '.', ('0' + (((0) / 10000000)%10)), ('0' + (((0) / 1000000)%10)), ('0' + (((0) / 100000)%10)), ('0' + (((0) / 10000)%10)), ('0' + (((0) / 1000)%10)), ('0' + (((0) / 100)%10)), ('0' + (((0) / 10)%10)), ('0' + ((0) % 10)),





  ']','\0'};
# 614 "CMakeCCompilerId.c"
char const* info_platform = "INFO" ":" "platform[" "Darwin" "]";
char const* info_arch = "INFO" ":" "arch[" "]";
# 634 "CMakeCCompilerId.c"
const char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" "11" "]";
# 645 "CMakeCCompilerId.c"
int main(int argc, char* argv[])

{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];

  require += info_version[argc];
# 667 "CMakeCCompilerId.c"
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}


Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/local/Cellar/gcc/9.3.0_1/bin/cpp-9 
Build flags: 
Id flags: -D__CLASSIC_C__ 

The output was:
0
# 1 "CMakeCCompilerId.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "CMakeCCompilerId.c"
# 321 "CMakeCCompilerId.c"
char * info_compiler = "INFO" ":" "compiler[" "GNU" "]";
# 567 "CMakeCCompilerId.c"
char info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  ('0' + (((9) / 10000000)%10)), ('0' + (((9) / 1000000)%10)), ('0' + (((9) / 100000)%10)), ('0' + (((9) / 10000)%10)), ('0' + (((9) / 1000)%10)), ('0' + (((9) / 100)%10)), ('0' + (((9) / 10)%10)), ('0' + ((9) % 10)),

  '.', ('0' + (((3) / 10000000)%10)), ('0' + (((3) / 1000000)%10)), ('0' + (((3) / 100000)%10)), ('0' + (((3) / 10000)%10)), ('0' + (((3) / 1000)%10)), ('0' + (((3) / 100)%10)), ('0' + (((3) / 10)%10)), ('0' + ((3) % 10)),

   '.', ('0' + (((0) / 10000000)%10)), ('0' + (((0) / 1000000)%10)), ('0' + (((0) / 100000)%10)), ('0' + (((0) / 10000)%10)), ('0' + (((0) / 1000)%10)), ('0' + (((0) / 100)%10)), ('0' + (((0) / 10)%10)), ('0' + ((0) % 10)),





  ']','\0'};
# 614 "CMakeCCompilerId.c"
char * info_platform = "INFO" ":" "platform[" "Darwin" "]";
char * info_arch = "INFO" ":" "arch[" "]";
# 634 "CMakeCCompilerId.c"
 char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" "11" "]";







int main(argc, argv) int argc; char *argv[];



{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];

  require += info_version[argc];
# 667 "CMakeCCompilerId.c"
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}


